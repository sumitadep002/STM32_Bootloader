
01_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d34  08002188  08002188  00002188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003ebc  08003ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eec  08003eec  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eec  08003eec  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00003eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ef4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0001000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0001000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000039f7  00000000  00000000  0001007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000e3a  00000000  00000000  00013a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003c8  00000000  00000000  000148b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002b2  00000000  00000000  00014c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001db35  00000000  00000000  00014f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004c71  00000000  00000000  00032a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b0a3b  00000000  00000000  000376d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d24  00000000  00000000  000e810c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  000e8e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08002188 <__do_global_dtors_aux>:
 8002188:	b510      	push	{r4, lr}
 800218a:	4c05      	ldr	r4, [pc, #20]	; (80021a0 <__do_global_dtors_aux+0x18>)
 800218c:	7823      	ldrb	r3, [r4, #0]
 800218e:	b933      	cbnz	r3, 800219e <__do_global_dtors_aux+0x16>
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__do_global_dtors_aux+0x1c>)
 8002192:	b113      	cbz	r3, 800219a <__do_global_dtors_aux+0x12>
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <__do_global_dtors_aux+0x20>)
 8002196:	f3af 8000 	nop.w
 800219a:	2301      	movs	r3, #1
 800219c:	7023      	strb	r3, [r4, #0]
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	2000000c 	.word	0x2000000c
 80021a4:	00000000 	.word	0x00000000
 80021a8:	08003ea4 	.word	0x08003ea4

080021ac <frame_dummy>:
 80021ac:	b508      	push	{r3, lr}
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <frame_dummy+0x10>)
 80021b0:	b11b      	cbz	r3, 80021ba <frame_dummy+0xe>
 80021b2:	4903      	ldr	r1, [pc, #12]	; (80021c0 <frame_dummy+0x14>)
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <frame_dummy+0x18>)
 80021b6:	f3af 8000 	nop.w
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	00000000 	.word	0x00000000
 80021c0:	20000010 	.word	0x20000010
 80021c4:	08003ea4 	.word	0x08003ea4

080021c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021cc:	f000 f920 	bl	8002410 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80021d0:	f000 f81a 	bl	8002208 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80021d4:	f000 f85a 	bl	800228c <MX_GPIO_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, ENABLE);
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <main+0x3c>)
 80021e0:	f000 fbf8 	bl	80029d4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80021e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e8:	f000 f978 	bl	80024dc <HAL_Delay>
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, DISABLE);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <main+0x3c>)
 80021f4:	f000 fbee 	bl	80029d4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80021f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021fc:	f000 f96e 	bl	80024dc <HAL_Delay>
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, ENABLE);
 8002200:	e7ea      	b.n	80021d8 <main+0x10>
 8002202:	bf00      	nop
 8002204:	48000400 	.word	0x48000400

08002208 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b090      	sub	sp, #64	; 0x40
 800220c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800220e:	f107 0318 	add.w	r3, r7, #24
 8002212:	2228      	movs	r2, #40	; 0x28
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fe18 	bl	8003e4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222e:	2301      	movs	r3, #1
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002232:	2310      	movs	r3, #16
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002236:	2302      	movs	r3, #2
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800223a:	2300      	movs	r3, #0
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800223e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fbdb 	bl	8002a04 <HAL_RCC_OscConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0x50>
		Error_Handler();
 8002254:	f000 f84c 	bl	80022f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002258:	230f      	movs	r3, #15
 800225a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225c:	2302      	movs	r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002268:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fc04 	bl	8003a80 <HAL_RCC_ClockConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0x7a>
		Error_Handler();
 800227e:	f000 f837 	bl	80022f0 <Error_Handler>
	}
}
 8002282:	bf00      	nop
 8002284:	3740      	adds	r7, #64	; 0x40
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_GPIO_Init+0x5c>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <MX_GPIO_Init+0x5c>)
 80022a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022aa:	6153      	str	r3, [r2, #20]
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_GPIO_Init+0x5c>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <MX_GPIO_Init+0x60>)
 80022c0:	f000 fb88 	bl	80029d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Green_Pin */
	GPIO_InitStruct.Pin = LED_Green_Pin;
 80022c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4804      	ldr	r0, [pc, #16]	; (80022ec <MX_GPIO_Init+0x60>)
 80022dc:	f000 fa08 	bl	80026f0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000400 	.word	0x48000400

080022f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022f8:	e7fe      	b.n	80022f8 <Error_Handler+0x8>
	...

080022fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_MspInit+0x44>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_MspInit+0x44>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6193      	str	r3, [r2, #24]
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_MspInit+0x44>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_MspInit+0x44>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a08      	ldr	r2, [pc, #32]	; (8002340 <HAL_MspInit+0x44>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_MspInit+0x44>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002332:	2007      	movs	r0, #7
 8002334:	f000 f9a8 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f884 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <SystemInit+0x20>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <SystemInit+0x20>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c0:	f7ff ffea 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <LoopForever+0xe>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <LoopForever+0x16>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ea:	f001 fd37 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ee:	f7ff feeb 	bl	80021c8 <main>

080023f2 <LoopForever>:

LoopForever:
    b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002400:	08003ef4 	.word	0x08003ef4
  ldr r2, =_sbss
 8002404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002408:	2000002c 	.word	0x2000002c

0800240c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_2_IRQHandler>
	...

08002410 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x28>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x28>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f931 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f808 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff ff66 	bl	80022fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40022000 	.word	0x40022000

0800243c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x54>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x58>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f93b 	bl	80026d6 <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00e      	b.n	8002488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d80a      	bhi.n	8002486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002478:	f000 f911 	bl	800269e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_InitTick+0x5c>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000000 	.word	0x20000000
 8002494:	20000008 	.word	0x20000008
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000028 	.word	0x20000028

080024c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000028 	.word	0x20000028

080024dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f4:	d005      	beq.n	8002502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_Delay+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002502:	bf00      	nop
 8002504:	f7ff ffde 	bl	80024c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d8f7      	bhi.n	8002504 <HAL_Delay+0x28>
  {
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000008 	.word	0x20000008

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002668:	f7ff ff8e 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff47 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff5c 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff8e 	bl	80025dc <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5d 	bl	8002588 <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffb0 	bl	8002644 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e14e      	b.n	800299e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8140 	beq.w	8002998 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d005      	beq.n	8002730 <HAL_GPIO_Init+0x40>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d130      	bne.n	8002792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002766:	2201      	movs	r2, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0201 	and.w	r2, r3, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d017      	beq.n	80027ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d123      	bne.n	8002822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 809a 	beq.w	8002998 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b55      	ldr	r3, [pc, #340]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a54      	ldr	r2, [pc, #336]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800287c:	4a50      	ldr	r2, [pc, #320]	; (80029c0 <HAL_GPIO_Init+0x2d0>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028a6:	d013      	beq.n	80028d0 <HAL_GPIO_Init+0x1e0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_GPIO_Init+0x2d4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00d      	beq.n	80028cc <HAL_GPIO_Init+0x1dc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <HAL_GPIO_Init+0x2d8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0x1d8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a44      	ldr	r2, [pc, #272]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_GPIO_Init+0x1d4>
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028c4:	2305      	movs	r3, #5
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028d0:	2300      	movs	r3, #0
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_GPIO_Init+0x2d0>)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f0:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002914:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800293e:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f47f aea9 	bne.w	8002700 <HAL_GPIO_Init+0x10>
  }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	48000400 	.word	0x48000400
 80029c8:	48000800 	.word	0x48000800
 80029cc:	48000c00 	.word	0x48000c00
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f001 b823 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 817d 	beq.w	8002d3a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a40:	4bbc      	ldr	r3, [pc, #752]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a4c:	4bb9      	ldr	r3, [pc, #740]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d15c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x10e>
 8002a58:	4bb6      	ldr	r3, [pc, #728]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d155      	bne.n	8002b12 <HAL_RCC_OscConfig+0x10e>
 8002a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_OscConfig+0x94>
 8002a92:	4ba8      	ldr	r3, [pc, #672]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e015      	b.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ab4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ac0:	4b9c      	ldr	r3, [pc, #624]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ac8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002acc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ad8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f002 021f 	and.w	r2, r2, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 811f 	beq.w	8002d38 <HAL_RCC_OscConfig+0x334>
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8116 	bne.w	8002d38 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f000 bfaf 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12e>
 8002b24:	4b83      	ldr	r3, [pc, #524]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a82      	ldr	r2, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e036      	b.n	8002ba0 <HAL_RCC_OscConfig+0x19c>
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x158>
 8002b42:	4b7c      	ldr	r3, [pc, #496]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7b      	ldr	r2, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a78      	ldr	r2, [pc, #480]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e021      	b.n	8002ba0 <HAL_RCC_OscConfig+0x19c>
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x184>
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a70      	ldr	r2, [pc, #448]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6d      	ldr	r2, [pc, #436]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x19c>
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f023 020f 	bic.w	r2, r3, #15
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	495f      	ldr	r1, [pc, #380]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d059      	beq.n	8002c7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff fc7b 	bl	80024c4 <HAL_GetTick>
 8002bce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7ff fc76 	bl	80024c4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d902      	bls.n	8002bea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f000 bf43 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 8002bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bfe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x218>
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e015      	b.n	8002c48 <HAL_RCC_OscConfig+0x244>
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ab      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1d0>
 8002c7c:	e05d      	b.n	8002d3a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff fc21 	bl	80024c4 <HAL_GetTick>
 8002c82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fc1c 	bl	80024c4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d902      	bls.n	8002c9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f000 bee9 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 8002c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002cb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2cc>
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e015      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
 8002cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_RCC_OscConfig+0x330>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d00:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d04:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d10:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f002 021f 	and.w	r2, r2, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ab      	bne.n	8002c88 <HAL_RCC_OscConfig+0x284>
 8002d30:	e003      	b.n	8002d3a <HAL_RCC_OscConfig+0x336>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 817d 	beq.w	800304a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d50:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d5c:	4ba3      	ldr	r3, [pc, #652]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d172      	bne.n	8002e4e <HAL_RCC_OscConfig+0x44a>
 8002d68:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d16c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x44a>
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d86:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x3a0>
 8002d9e:	4b93      	ldr	r3, [pc, #588]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002dbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dc8:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002dd2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dde:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002de2:	fab2 f282 	clz	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f002 021f 	and.w	r2, r2, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCC_OscConfig+0x410>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f000 be2e 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b75      	ldr	r3, [pc, #468]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	21f8      	movs	r1, #248	; 0xf8
 8002e2a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e32:	fa91 f1a1 	rbit	r1, r1
 8002e36:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e3a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e3e:	fab1 f181 	clz	r1, r1
 8002e42:	b2c9      	uxtb	r1, r1
 8002e44:	408b      	lsls	r3, r1
 8002e46:	4969      	ldr	r1, [pc, #420]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4c:	e0fd      	b.n	800304a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8088 	beq.w	8002f70 <HAL_RCC_OscConfig+0x56c>
 8002e60:	2301      	movs	r3, #1
 8002e62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	2301      	movs	r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff fb1a 	bl	80024c4 <HAL_GetTick>
 8002e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff fb15 	bl	80024c4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	f000 bde2 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_RCC_OscConfig+0x4d8>
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e013      	b.n	8002f04 <HAL_RCC_OscConfig+0x500>
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ef4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2202      	movs	r2, #2
 8002f06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f0e:	fa92 f2a2 	rbit	r2, r2
 8002f12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0220 	orr.w	r2, r2, #32
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0af      	beq.n	8002e96 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	21f8      	movs	r1, #248	; 0xf8
 8002f4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f54:	fa91 f1a1 	rbit	r1, r1
 8002f58:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f60:	fab1 f181 	clz	r1, r1
 8002f64:	b2c9      	uxtb	r1, r1
 8002f66:	408b      	lsls	r3, r1
 8002f68:	4920      	ldr	r1, [pc, #128]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
 8002f6e:	e06c      	b.n	800304a <HAL_RCC_OscConfig+0x646>
 8002f70:	2301      	movs	r3, #1
 8002f72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	461a      	mov	r2, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fa92 	bl	80024c4 <HAL_GetTick>
 8002fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7ff fa8d 	bl	80024c4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	f000 bd5a 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d104      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5ec>
 8002fe6:	4b01      	ldr	r3, [pc, #4]	; (8002fec <HAL_RCC_OscConfig+0x5e8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e015      	b.n	8003018 <HAL_RCC_OscConfig+0x614>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003002:	2302      	movs	r3, #2
 8003004:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003008:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003014:	4bc8      	ldr	r3, [pc, #800]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2202      	movs	r2, #2
 800301a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800301e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003022:	fa92 f2a2 	rbit	r2, r2
 8003026:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800302a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ad      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8110 	beq.w	8003280 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d079      	beq.n	8003164 <HAL_RCC_OscConfig+0x760>
 8003070:	2301      	movs	r3, #1
 8003072:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	4bab      	ldr	r3, [pc, #684]	; (800333c <HAL_RCC_OscConfig+0x938>)
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	461a      	mov	r2, r3
 8003096:	2301      	movs	r3, #1
 8003098:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7ff fa13 	bl	80024c4 <HAL_GetTick>
 800309e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a4:	f7ff fa0e 	bl	80024c4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d902      	bls.n	80030ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	f000 bcdb 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030d4:	2202      	movs	r2, #2
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030f8:	2202      	movs	r2, #2
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f2a3 	rbit	r2, r3
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003112:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003114:	4b88      	ldr	r3, [pc, #544]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 8003116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003120:	2102      	movs	r1, #2
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	fa93 f1a3 	rbit	r1, r3
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800313a:	6019      	str	r1, [r3, #0]
  return result;
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0a0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x6a0>
 8003162:	e08d      	b.n	8003280 <HAL_RCC_OscConfig+0x87c>
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003186:	601a      	str	r2, [r3, #0]
  return result;
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003190:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x938>)
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	461a      	mov	r2, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7ff f98d 	bl	80024c4 <HAL_GetTick>
 80031aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b0:	f7ff f988 	bl	80024c4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d902      	bls.n	80031c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	f000 bc55 	b.w	8003a70 <HAL_RCC_OscConfig+0x106c>
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ce:	2202      	movs	r2, #2
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031f2:	2202      	movs	r2, #2
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003230:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 8003234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800323e:	2102      	movs	r1, #2
 8003240:	6019      	str	r1, [r3, #0]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f1a3 	rbit	r1, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003258:	6019      	str	r1, [r3, #0]
  return result;
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d197      	bne.n	80031b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 81a1 	beq.w	80035d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_RCC_OscConfig+0x93c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11a      	bne.n	8003318 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_RCC_OscConfig+0x93c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_RCC_OscConfig+0x93c>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7ff f8e9 	bl	80024c4 <HAL_GetTick>
 80032f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	e009      	b.n	800330c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7ff f8e4 	bl	80024c4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e3b1      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCC_OscConfig+0x93c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10d      	bne.n	8003344 <HAL_RCC_OscConfig+0x940>
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a02      	ldr	r2, [pc, #8]	; (8003338 <HAL_RCC_OscConfig+0x934>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e03c      	b.n	80033b0 <HAL_RCC_OscConfig+0x9ac>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	10908120 	.word	0x10908120
 8003340:	40007000 	.word	0x40007000
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <HAL_RCC_OscConfig+0x96a>
 8003354:	4bc1      	ldr	r3, [pc, #772]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4ac0      	ldr	r2, [pc, #768]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	4bbe      	ldr	r3, [pc, #760]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4abd      	ldr	r2, [pc, #756]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	e020      	b.n	80033b0 <HAL_RCC_OscConfig+0x9ac>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x994>
 800337e:	4bb7      	ldr	r3, [pc, #732]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4ab6      	ldr	r2, [pc, #728]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	4bb4      	ldr	r3, [pc, #720]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4ab3      	ldr	r2, [pc, #716]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0x9ac>
 8003398:	4bb0      	ldr	r3, [pc, #704]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4aaf      	ldr	r2, [pc, #700]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	4bad      	ldr	r3, [pc, #692]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4aac      	ldr	r2, [pc, #688]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8081 	beq.w	80034c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7ff f87f 	bl	80024c4 <HAL_GetTick>
 80033c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7ff f87a 	bl	80024c4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e345      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003410:	2202      	movs	r2, #2
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800342a:	601a      	str	r2, [r3, #0]
  return result;
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003434:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0xa4c>
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	e013      	b.n	8003478 <HAL_RCC_OscConfig+0xa74>
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003458:	2202      	movs	r2, #2
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003480:	2102      	movs	r1, #2
 8003482:	6011      	str	r1, [r2, #0]
 8003484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003488:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fa92 f1a2 	rbit	r1, r2
 8003492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003496:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800349a:	6011      	str	r1, [r2, #0]
  return result;
 800349c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d084      	beq.n	80033cc <HAL_RCC_OscConfig+0x9c8>
 80034c2:	e07f      	b.n	80035c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fe fffe 	bl	80024c4 <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fff9 	bl	80024c4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e2c4      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ee:	2202      	movs	r2, #2
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fa93 f2a3 	rbit	r2, r3
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003512:	2202      	movs	r2, #2
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800352c:	601a      	str	r2, [r3, #0]
  return result;
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0xb4e>
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	e013      	b.n	800357a <HAL_RCC_OscConfig+0xb76>
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800355a:	2202      	movs	r2, #2
 800355c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003582:	2102      	movs	r1, #2
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fa92 f1a2 	rbit	r1, r2
 8003594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003598:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800359c:	6011      	str	r1, [r2, #0]
  return result;
 800359e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f002 021f 	and.w	r2, r2, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f202 	lsl.w	r2, r1, r2
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d184      	bne.n	80034ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8242 	beq.w	8003a6e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_RCC_OscConfig+0xc58>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	f000 8213 	beq.w	8003a1e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b02      	cmp	r3, #2
 8003606:	f040 8162 	bne.w	80038ce <HAL_RCC_OscConfig+0xeca>
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800362e:	601a      	str	r2, [r3, #0]
  return result;
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003638:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	461a      	mov	r2, r3
 800364c:	2300      	movs	r3, #0
 800364e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe ff38 	bl	80024c4 <HAL_GetTick>
 8003654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003658:	e00c      	b.n	8003674 <HAL_RCC_OscConfig+0xc70>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe ff30 	bl	80024c4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1fd      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800367c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003698:	601a      	str	r2, [r3, #0]
  return result;
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d102      	bne.n	80036be <HAL_RCC_OscConfig+0xcba>
 80036b8:	4bb0      	ldr	r3, [pc, #704]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	e027      	b.n	800370e <HAL_RCC_OscConfig+0xd0a>
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	4b9c      	ldr	r3, [pc, #624]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003712:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003716:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800371a:	6011      	str	r1, [r2, #0]
 800371c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003720:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	fa92 f1a2 	rbit	r1, r2
 800372a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003732:	6011      	str	r1, [r2, #0]
  return result;
 8003734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003738:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f002 021f 	and.w	r2, r2, #31
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d182      	bne.n	8003660 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	430b      	orrs	r3, r1
 800377c:	497f      	ldr	r1, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800378a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800378e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003794:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037a6:	601a      	str	r2, [r3, #0]
  return result;
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	461a      	mov	r2, r3
 80037c4:	2301      	movs	r3, #1
 80037c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fe7c 	bl	80024c4 <HAL_GetTick>
 80037cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	e009      	b.n	80037e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe fe77 	bl	80024c4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e144      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0xe2c>
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e027      	b.n	8003880 <HAL_RCC_OscConfig+0xe7c>
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	fa93 f2a3 	rbit	r2, r3
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800385e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003884:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003892:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	fa92 f1a2 	rbit	r1, r2
 800389c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038a4:	6011      	str	r1, [r2, #0]
  return result;
 80038a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f002 021f 	and.w	r2, r2, #31
 80038c0:	2101      	movs	r1, #1
 80038c2:	fa01 f202 	lsl.w	r2, r1, r2
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d082      	beq.n	80037d2 <HAL_RCC_OscConfig+0xdce>
 80038cc:	e0cf      	b.n	8003a6e <HAL_RCC_OscConfig+0x106a>
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fdd6 	bl	80024c4 <HAL_GetTick>
 8003918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391c:	e009      	b.n	8003932 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fdd1 	bl	80024c4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e09e      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800393a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003956:	601a      	str	r2, [r3, #0]
  return result;
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d104      	bne.n	8003980 <HAL_RCC_OscConfig+0xf7c>
 8003976:	4b01      	ldr	r3, [pc, #4]	; (800397c <HAL_RCC_OscConfig+0xf78>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e029      	b.n	80039d0 <HAL_RCC_OscConfig+0xfcc>
 800397c:	40021000 	.word	0x40021000
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x1078>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	fa92 f1a2 	rbit	r1, r2
 80039ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039f4:	6011      	str	r1, [r2, #0]
  return result;
 80039f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d180      	bne.n	800391e <HAL_RCC_OscConfig+0xf1a>
 8003a1c:	e027      	b.n	8003a6e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e01e      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_OscConfig+0x1078>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b09e      	sub	sp, #120	; 0x78
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e162      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b90      	ldr	r3, [pc, #576]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b8d      	ldr	r3, [pc, #564]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	498b      	ldr	r1, [pc, #556]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b89      	ldr	r3, [pc, #548]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e14a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b82      	ldr	r3, [pc, #520]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	497f      	ldr	r1, [pc, #508]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80dc 	beq.w	8003cac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d13c      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xf6>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xa6>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e00f      	b.n	8003b46 <HAL_RCC_ClockConfig+0xc6>
 8003b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
 8003b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b38:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d17b      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0f3      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d13c      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x178>
 8003b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x128>
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x148>
 8003ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b2      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x1a0>
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e00d      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1bc>
 8003c20:	2302      	movs	r3, #2
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	617a      	str	r2, [r7, #20]
  return result;
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e079      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7fe fc22 	bl	80024c4 <HAL_GetTick>
 8003c80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fe fc1e 	bl	80024c4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e061      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d214      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4906      	ldr	r1, [pc, #24]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e040      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	491a      	ldr	r1, [pc, #104]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d22:	f000 f829 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d26:	4601      	mov	r1, r0
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	22f0      	movs	r2, #240	; 0xf0
 8003d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	fa92 f2a2 	rbit	r2, r2
 8003d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	40d3      	lsrs	r3, r2
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x2ec>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_RCC_ClockConfig+0x2f0>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_ClockConfig+0x2f4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fb70 	bl	800243c <HAL_InitTick>
  
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3778      	adds	r7, #120	; 0x78
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08003ebc 	.word	0x08003ebc
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x30>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x36>
 8003da6:	e03c      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003daa:	623b      	str	r3, [r7, #32]
      break;
 8003dac:	e03c      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003db4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003db8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	607a      	str	r2, [r7, #4]
  return result;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	40d3      	lsrs	r3, r2
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	220f      	movs	r2, #15
 8003ddc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	60fa      	str	r2, [r7, #12]
  return result;
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	40d3      	lsrs	r3, r2
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e00:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e004      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	623b      	str	r3, [r7, #32]
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e24:	623b      	str	r3, [r7, #32]
      break;
 8003e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	372c      	adds	r7, #44	; 0x2c
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	007a1200 	.word	0x007a1200
 8003e40:	08003ecc 	.word	0x08003ecc
 8003e44:	08003edc 	.word	0x08003edc
 8003e48:	003d0900 	.word	0x003d0900

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1b64      	subs	r4, r4, r5
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2600      	movs	r6, #0
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4d0b      	ldr	r5, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 f818 	bl	8003ea4 <_init>
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2600      	movs	r6, #0
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08003eec 	.word	0x08003eec
 8003e98:	08003eec 	.word	0x08003eec
 8003e9c:	08003eec 	.word	0x08003eec
 8003ea0:	08003ef0 	.word	0x08003ef0

08003ea4 <_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr

08003eb0 <_fini>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr
